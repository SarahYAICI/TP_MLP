# -*- coding: utf-8 -*-
"""TP_MLP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xo531FyrcM3Vs3uCSZWt7p4vlRaMr_wb
"""

import time 
from keras.datasets import mnist
from sklearn.neural_network import MLPClassifier

# the data, shuffled and split between train and test sets
(X_train, y_train), (X_test, y_test) = mnist.load_data()

# Reshape each 28x28 image -> 784 dim. vector
X_train = X_train.reshape(60000, 784)
X_test = X_test.reshape(10000, 784)

from sklearn.preprocessing import StandardScaler, MinMaxScaler
start_time = time.time()
scaler = MinMaxScaler()
scaler.fit(X_train)
X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)

clf = MLPClassifier(hidden_layer_sizes=(10,20), activation = 'relu', solver ='lbfgs', random_state = 0).fit(X_train, y_train)
clf.score(X_test, y_test)
pred = clf.predict(X_test)
end_time = time.time()

print(" le score obtenu est de : " +str(clf.score(X_test, y_test)))
print(" le temps ecoule "+ str(end_time - start_time),"s")

from sklearn.linear_model import Perceptron
from sklearn.linear_model import SGDClassifier
from sklearn.pipeline import make_pipeline


from sklearn.preprocessing import StandardScaler

scaler = MinMaxScaler()
scaler.fit(X_train)
X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)
clf = SGDClassifier(loss="perceptron", eta0=1, learning_rate="constant", penalty=None)
clf = make_pipeline(StandardScaler(),
                         SGDClassifier(max_iter=1000, tol=1e-3))


clf.fit(X_train, y_train)

clf.score(X_test, y_test)

from sklearn.linear_model import Perceptron
from sklearn.linear_model import SGDClassifier
from sklearn.pipeline import make_pipeline
from keras.datasets import mnist
from keras.datasets import mnist
from sklearn.neural_network import MLPClassifier

# the data, shuffled and split between train and test sets
(X_train, y_train), (X_test, y_test) = mnist.load_data()

# Reshape each 28x28 image -> 784 dim. vector
X_train = X_train.reshape(60000, 784)
X_test = X_test.reshape(10000, 784)
clf = Perceptron(tol=1e-3, random_state=0)
clf.fit(X_train, y_train)
clf.score(X_test, y_test)

from keras.datasets import mnist
from sklearn.neural_network import MLPClassifier

# the data, shuffled and split between train and test sets
(X_train, y_train), (X_test, y_test) = mnist.load_data()

# Reshape each 28x28 image -> 784 dim. vector
X_train = X_train.reshape(60000, 784)
X_test = X_test.reshape(10000, 784)

from sklearn.preprocessing import StandardScaler, MinMaxScaler

scaler = MinMaxScaler()
scaler.fit(X_train)
X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)

clf = MLPClassifier(hidden_layer_sizes=(50,100), activation = 'relu', solver ='lbfgs', random_state = 0).fit(X_train, y_train)
clf.score(X_test, y_test)
pred = clf.predict(X_test)


print(" le score obtenu est de : " +str(clf.score(X_test, y_test)))

from sklearn.preprocessing import StandardScaler, MinMaxScaler

scaler = MinMaxScaler()
scaler.fit(X_train)
X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)

clf = MLPClassifier(hidden_layer_sizes=(100,200), activation = 'relu', solver ='lbfgs', random_state = 0).fit(X_train, y_train)
clf.score(X_test, y_test)
pred = clf.predict(X_test)


print(" le score obtenu est de : " +str(clf.score(X_test, y_test)))

from keras.datasets import mnist
from sklearn.neural_network import MLPClassifier

# the data, shuffled and split between train and test sets
(X_train, y_train), (X_test, y_test) = mnist.load_data()

# Reshape each 28x28 image -> 784 dim. vector
X_train = X_train.reshape(60000, 784)
X_test = X_test.reshape(10000, 784)

from sklearn.preprocessing import StandardScaler, MinMaxScaler

scaler = MinMaxScaler()
scaler.fit(X_train)
X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)

clf = MLPClassifier(hidden_layer_sizes=(100,200, 50), activation = 'relu', solver ='lbfgs', random_state = 0).fit(X_train, y_train)
clf.score(X_test, y_test)
pred = clf.predict(X_test)


print(" le score obtenu est de : " +str(clf.score(X_test, y_test)))

from keras.datasets import mnist
from sklearn.neural_network import MLPClassifier

(X_train, y_train), (X_test, y_test) = mnist.load_data()

X_train = X_train.reshape(60000, 784)
X_test = X_test.reshape(10000, 784)

from sklearn.preprocessing import StandardScaler, MinMaxScaler

scaler = MinMaxScaler()
scaler.fit(X_train)
X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)


clf= MLPClassifier(solver ='sgd',alpha= 1e-4,hidden_layer_sizes=(300),learning_rate_init=0.07,random_state=0)
clf.fit(X_train,y_train)
print(clf.score(X_test,y_test))

from keras.datasets import mnist
from sklearn.neural_network import MLPClassifier

(X_train, y_train), (X_test, y_test) = mnist.load_data()

X_train = X_train.reshape(60000, 784)
X_test = X_test.reshape(10000, 784)

from sklearn.preprocessing import StandardScaler, MinMaxScaler

scaler = MinMaxScaler()
scaler.fit(X_train)
X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)


clf= MLPClassifier(solver ='sgd',alpha= 1e-4,hidden_layer_sizes=(300,150),learning_rate_init=0.07,random_state=0)
clf.fit(X_train,y_train)
print(clf.score(X_test,y_test))

from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier
from time import time
from sklearn.metrics import classification_report

from sklearn.metrics import accuracy_score
from sklearn.preprocessing import MinMaxScaler

from keras.datasets import mnist
from sklearn.linear_model import Perceptron
from sklearn.model_selection import  GridSearchCV
from time import time
from sklearn.pipeline import Pipeline



(xtrain,ytrain),(xtest,ytest) = mnist.load_data()
xtrain = xtrain.reshape(60000, 28*28).astype('float32')
xtest = xtest.reshape(10000, 28*28).astype('float32')

xtrain /= 255
xtest /= 255

from sklearn.metrics import classification_report

#MLP 1 HL 300 avec preprocessing

temps_depart = time()
MLP = Pipeline([('scaler', MinMaxScaler()),('mlp', MLPClassifier( activation = 'relu',
      solver = 'adam',hidden_layer_sizes=(300), random_state=0))]).fit(xtrain, ytrain)
temps_fin= time()

ypred = MLP.predict(xtest)
score = accuracy_score(ytest, ypred)

print(f"score {score}")
print(f"Temps d'entraînement = {temps_fin- temps_depart}s")

#MLP 1 HL 300 sans preprocessing

temps_depart = time()
MLP = Pipeline([('scaler', MinMaxScaler()),('mlp', MLPClassifier( activation = 'relu',
    solver = 'adam',hidden_layer_sizes=(300), random_state=0))]).fit(xtrain, ytrain)
temps_fin = time()

ypred = MLP.predict(xtest)
score = accuracy_score(ytest, ypred)

print(f"score {score}")
print(f"Temps d'entraînement = {temps_fin- temps_depart}s")

#MLP 2 HL 500-300 sans preprocessing

temps_depart = time()
MLP = Pipeline([('scaler', MinMaxScaler()),('mlp', MLPClassifier( activation = 'relu',
    solver = 'adam',hidden_layer_sizes=(500,300), random_state=0))]).fit(xtrain, ytrain)
temps_fin = time()

ypred = MLP.predict(xtest)
score = accuracy_score(ytest, ypred)

print(f"score {score}")
print(f"Temps d'entraînement = {temps_fin- temps_depart}s")

from keras.datasets import mnist
from sklearn.linear_model import Perceptron
from sklearn.model_selection import  GridSearchCV
from time import time
from sklearn.metrics import accuracy_score

(X_train,y_train),(X_test,y_test) = mnist.load_data()
X_train = X_train.reshape(60000, 28*28).astype('float32')
X_test = X_test.reshape(10000, 28*28).astype('float32')

X_train /= 255
X_test /= 255
#Perceptron sans preprocessing
temps_depart = time()
perceptron= Perceptron(max_iter = 50 ,random_state=0)
perceptron.fit(X_train, y_train)
temps_fin = time()

y_pred = perceptron.predict(X_test)
score = accuracy_score(y_test, y_pred)

print(f"score {score}")
print(f"Temps d'entraînement = {temps_fin- temps_depart}s")

from keras.datasets import mnist
from sklearn.linear_model import Perceptron
from time import time
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.metrics import accuracy_score

(X_train,y_train),(X_test,y_test) = mnist.load_data()
X_train = X_train.reshape(60000, 28*28).astype('float32')
X_test = X_test.reshape(10000, 28*28).astype('float32')

X_train /= 255
X_test /= 255

#Perceptron avec preprocessing
scaler = MinMaxScaler()
scaler.fit(X_train)
X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)

temps_depart = time()
perceptron= Perceptron(max_iter = 50 ,random_state=0)
perceptron.fit(X_train, y_train)
temps_fin = time()

y_pred = perceptron.predict(X_test)
score = accuracy_score(y_test, y_pred)

print(f"score {score}")
print(f"Temps d'entraînement = {temps_fin- temps_depart}s")